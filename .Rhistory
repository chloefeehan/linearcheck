"in the model because the p-value:",round(bp_values$p.value, 4),
" is greater than 0.05. This passes the equal variance assumption.")
} else {
commentary <- paste("There is significant evidence to conclude there is heteroscedasticity",
"in the model because the p-value:", round(bp_values$p.value, 4),
" is less than or equal to 0.05. This violates the equal variance assumption.")
}
return(commentary)
}
data(cars)
residplot(cars, speed, dist)
library(linearcheck)
data(cars)
residplot(cars, speed, dist)
library(ggplot2)
library(lmtest)
library(rlang)
library(broom)
# Making residual plot
residplot <- function(data, x, y) {
# x and y variables to vectors
# Source: ChatGPT to convert x and y to vectors
x <- as.vector(data[[deparse(substitute(x))]])
y <- as.vector(data[[deparse(substitute(y))]])
# linear model
model <- lm(y ~ x)
augmented_data <- broom::augment(model)
# plotting residuals
plot <-
#lm({{y}} ~ {{x}}, data = augmented_data) |>
#broom::augment() |>
ggplot(augmented_data, mapping = aes(y = .resid, x = .fitted)) +
geom_point(color = "darkblue") +
labs(x = "Fitted", y = "Residuals",
title = "Residuals vs. Fitted Plot") +
theme_bw()
print(plot)
}
bptable <- function(data, x, y, commentary = NULL) {
bp_values <- bptest({{y}} ~ {{x}}, data = data)
print(bp_values)
if (commentary == TRUE) {
commentary <- equalvar_commentary(bp_values)
cat("\nCommentary: ", commentary, "\n")
}
}
# Commentary helper function
equalvar_commentary <- function(bp_values) {
if (bp_values$p.value > 0.05) {
commentary <- paste("There is significant evidence to conclude there is homoscedasticity",
"in the model because the p-value:",round(bp_values$p.value, 4),
" is greater than 0.05. This passes the equal variance assumption.")
} else {
commentary <- paste("There is significant evidence to conclude there is heteroscedasticity",
"in the model because the p-value:", round(bp_values$p.value, 4),
" is less than or equal to 0.05. This violates the equal variance assumption.")
}
return(commentary)
}
library(linearcheck)
data(cars)
residplot(cars, speed, dist)
library(ggplot2)
library(lmtest)
library(broom)
# Making residual plot
residplot <- function(data, x, y) {
# x and y variables to vectors
# Source: ChatGPT to convert x and y to vectors
x <- as.vector(data[[deparse(substitute(x))]])
y <- as.vector(data[[deparse(substitute(y))]])
# linear model
model <- lm(y ~ x)
augmented_data <- broom::augment(model)
# plotting residuals
plot <-
#lm({{y}} ~ {{x}}, data = augmented_data) |>
#broom::augment() |>
ggplot(augmented_data, mapping = aes(y = .resid, x = .fitted)) +
geom_point(color = "darkblue") +
labs(x = "Fitted", y = "Residuals",
title = "Residuals vs. Fitted Plot") +
theme_bw()
print(plot)
}
bptable <- function(data, x, y, commentary = NULL) {
bp_values <- bptest({{y}} ~ {{x}}, data = data)
print(bp_values)
if (commentary == TRUE) {
commentary <- equalvar_commentary(bp_values)
cat("\nCommentary: ", commentary, "\n")
}
}
# Commentary helper function
equalvar_commentary <- function(bp_values) {
if (bp_values$p.value > 0.05) {
commentary <- paste("There is significant evidence to conclude there is homoscedasticity",
"in the model because the p-value:",round(bp_values$p.value, 4),
" is greater than 0.05. This passes the equal variance assumption.")
} else {
commentary <- paste("There is significant evidence to conclude there is heteroscedasticity",
"in the model because the p-value:", round(bp_values$p.value, 4),
" is less than or equal to 0.05. This violates the equal variance assumption.")
}
return(commentary)
}
library(linearcheck)
data(cars)
residplot(cars, speed, dist)
library(lmtest)
bptable <- function(data, x, y, commentary = NULL) {
bp_values <- bptest({{y}} ~ {{x}}, data = data)
print(bp_values)
if (commentary == TRUE) {
commentary <- equalvar_commentary(bp_values)
cat("\nCommentary: ", commentary, "\n")
}
}
library(linearcheck)
data(cars)
bptable(cars, speed, dist)
library(lmtest)
bptable <- function(data, x, y, commentary = NULL) {
x <- as.vector(data[[deparse(substitute(x))]])
y <- as.vector(data[[deparse(substitute(y))]])
bp_values <- bptest({{y}} ~ {{x}}, data = data)
print(bp_values)
if (commentary == TRUE) {
commentary <- equalvar_commentary(bp_values)
cat("\nCommentary: ", commentary, "\n")
}
}
# Commentary helper function
equalvar_commentary <- function(bp_values) {
if (bp_values$p.value > 0.05) {
commentary <- paste("There is significant evidence to conclude there is homoscedasticity",
"in the model because the p-value:",round(bp_values$p.value, 4),
" is greater than 0.05. This passes the equal variance assumption.")
} else {
commentary <- paste("There is significant evidence to conclude there is heteroscedasticity",
"in the model because the p-value:", round(bp_values$p.value, 4),
" is less than or equal to 0.05. This violates the equal variance assumption.")
}
return(commentary)
}
library(linearcheck)
data(cars)
bptable(cars, speed, dist)
bptable(cars, speed, dist, TRUE)
library(lmtest)
bptable <- function(data, x, y, commentary = NULL) {
# x and y variables to vectors
# Source: ChatGPT to convert x and y to vectors
x <- as.vector(data[[deparse(substitute(x))]])
y <- as.vector(data[[deparse(substitute(y))]])
bp_values <- bptest({{y}} ~ {{x}}, data = data)
print(bp_values)
if (commentary == TRUE) {
commentary <- equalvar_commentary(bp_values)
cat("\nCommentary: ", commentary, "\n")
}
else (commentary = NULL) {
library(lmtest)
bptable <- function(data, x, y, commentary = NULL) {
# x and y variables to vectors
# Source: ChatGPT to convert x and y to vectors
x <- as.vector(data[[deparse(substitute(x))]])
y <- as.vector(data[[deparse(substitute(y))]])
bp_values <- bptest({{y}} ~ {{x}}, data = data)
print(bp_values)
if (commentary == TRUE) {
commentary <- equalvar_commentary(bp_values)
cat("\nCommentary: ", commentary, "\n")
}
else (commentary == NULL) {
library(lmtest)
bptable <- function(data, x, y, commentary = NULL) {
# x and y variables to vectors
# Source: ChatGPT to convert x and y to vectors
x <- as.vector(data[[deparse(substitute(x))]])
y <- as.vector(data[[deparse(substitute(y))]])
bp_values <- bptest({{y}} ~ {{x}}, data = data)
print(bp_values)
if (commentary == TRUE) {
commentary <- equalvar_commentary(bp_values)
cat("\nCommentary: ", commentary, "\n")
}
else (commentary == is.null) {
# Making residual plot
residplot <- function(data, x, y) {
# x and y variables to vectors
# Source: ChatGPT to convert x and y to vectors
x <- as.vector(data[[deparse(substitute(x))]])
y <- as.vector(data[[deparse(substitute(y))]])
# linear model
model <- lm(y ~ x)
augmented_data <- broom::augment(model)
# plotting residuals
plot <-
ggplot(augmented_data, mapping = aes(y = .resid, x = .fitted)) +
geom_point(color = "darkblue") +
labs(x = "Fitted", y = "Residuals",
title = "Residuals vs. Fitted Plot") +
theme_bw()
print(plot)
}
library(lmtest)
bptable <- function(data, x, y, commentary = NULL) {
# x and y variables to vectors
# Source: ChatGPT to convert x and y to vectors
x <- as.vector(data[[deparse(substitute(x))]])
y <- as.vector(data[[deparse(substitute(y))]])
bp_values <- bptest({{y}} ~ {{x}}, data = data)
print(bp_values)
if (commentary == TRUE) {
commentary <- equalvar_commentary(bp_values)
cat("\nCommentary: ", commentary, "\n")
}
else NULL
}
library(linearcheck)
data(cars)
bptable(cars, speed, dist)
bptable <- function(data, x, y, commentary = NULL) {
# x and y variables to vectors
# Source: ChatGPT to convert x and y to vectors
x <- as.vector(data[[deparse(substitute(x))]])
y <- as.vector(data[[deparse(substitute(y))]])
bp_values <- bptest({{y}} ~ {{x}}, data = data)
print(bp_values)
if (commentary == TRUE) {
commentary <- equalvar_commentary(bp_values)
if (!is.null(commentary)) {
cat("\nCommentary: ", commentary, "\n")
}
}
}
library(linearcheck)
data(cars)
bptable(cars, speed, dist)
library(lmtest)
bptable <- function(data, x, y, commentary = NULL) {
# x and y variables to vectors
# Source: ChatGPT to convert x and y to vectors
x <- as.vector(data[[deparse(substitute(x))]])
y <- as.vector(data[[deparse(substitute(y))]])
bp_values <- bptest({{y}} ~ {{x}}, data = data)
print(bp_values)
if (!is.null(commentary) && commentary == TRUE) {
commentary <- equalvar_commentary(bp_values)
cat("\nCommentary: ", commentary, "\n")
}
}
library(linearcheck)
data(cars)
bptable(cars, speed, dist)
# Returning ACF and PACF
acf_pacf <- function(data, x, y) {
# x and y variables to vectors
# Source: ChatGPT to convert x and y to vectors
x <- as.vector(data[[deparse(substitute(x))]])
y <- as.vector(data[[deparse(substitute(y))]])
par(mfrow=c(2,2))
acf({{x}}, main = "X ACF Plot")
pacf({{x}}, main = "X PACF Plot")
acf({{y}}, main = "Y ACF Plot")
pacf({{y}}, main = "Y PACF Plot")
}
library(linearcheck)
data(cars)
acf_pacf(cars, speed, dist)
library(lmtest)
#Prints out Durbin-Watson test and commentary if specified
dwtable <- function(data, x, y, commentary = NULL) {
# x and y variables to vectors
# Source: ChatGPT to convert x and y to vectors
x <- as.vector(data[[deparse(substitute(x))]])
y <- as.vector(data[[deparse(substitute(y))]])
dw_value <- dwtest({{y}} ~ {{x}}, data = data)
print(dw_value)
if (!is.null(commentary) && commentary == TRUE) {
commentary <- independence_commentary(dw_value)
cat("\nCommentary: ", commentary, "\n")
}
}
library(linearcheck)
data(cars)
dwtable(cars, speed, dist)
#Prints out Durbin-Watson test and commentary if specified
dwtable <- function(data, x, y, commentary = NULL) {
# x and y variables to vectors
# Source: ChatGPT to convert x and y to vectors
x <- as.vector(data[[deparse(substitute(x))]])
y <- as.vector(data[[deparse(substitute(y))]])
dw_value <- dwtest(y ~ x, data = data)
print(dw_value)
if (!is.null(commentary) && commentary == TRUE) {
commentary <- independence_commentary(dw_value)
cat("\nCommentary: ", commentary, "\n")
}
}
independence_commentary <- function(dw_value) {
if (dw_value$p.value > 0.05) {
commentary <- paste("There is significant evidence to conclude there is independence",
"in the model because the p-value:", round(dw_value$p.value, 4),
"is greater than 0.05. This passes the independence assumption.")
} else {
commentary <- paste("There is significant evidence to conclude there is not independence",
"in the model because the p-value:", round(dw_value$p.value, 4),
"is less than or equal to 0.05. This violates the independence assumption.")
}
return(commentary)
}
library(linearcheck)
data(cars)
dwtable(cars, speed, dist)
bptable <- function(data, x, y, commentary = NULL) {
# x and y variables to vectors
# Source: ChatGPT to convert x and y to vectors
x <- as.vector(data[[deparse(substitute(x))]])
y <- as.vector(data[[deparse(substitute(y))]])
# getting bp values
bp_values <- bptest(y ~ x, data = data)
print(bp_values)
# printing commentary if wanted
if (!is.null(commentary) && commentary == TRUE) {
commentary <- equalvar_commentary(bp_values)
cat("\nCommentary: ", commentary, "\n")
}
}
library(linearcheck)
data(cars)
bptable(cars, speed, dist)
bptable(cars, speed, dist, TRUE)
# Creates a linear plot with line of best fit
linearplot <- function(data, x, y, title) {
plot <- ggplot(data, mapping = aes(x = {{x}}, y = {{y}})) +
geom_point(color = "blue") +
geom_smooth(method = "lm", fill = "lightblue", color = "aquamarine4") +
theme_bw() +
labs(title = title) +
theme_bw()
print(plot)
}
# Prints a summary statistics table and interpretation if specified
stats_table <- function(model, commentary = NULL) {
model_summary <- summary(model)
print(model_summary)
if (commentary == TRUE) {
commentary <- linearity_commentary(model)
cat(commentary, "\n")
}
}
# Conditions for Interpretations for adjusted rsquared and p-value
linearity_commentary <- function(model) {
# Get summary statistics
model_summary <- summary(model)
# Get adjusted r-squared value
adj_rsquared <- model_summary$adj.r.squared
f_stat <- model_summary$fstatistic[1]
df1 <- model_summary$fstatistic[2]
df2 <- model_summary$fstatistic[3]
# Calculate the p-value for the F-statistic
p_value <- pf(f_stat, df1, df2, lower.tail = FALSE)
# Conditions for adjusted r-squared value and interpretations
if (adj_rsquared >= 0.8) {
direction <- "positive"
value <-  "is greater than or equal to 0.8"
strength <- "a strong"
} else if (adj_rsquared >= 0.5 & adj_rsquared < 0.8) {
direction <- "positive"
value <-  "is between 0.5 and 0.8"
strength <- "a moderate"
} else if (adj_rsquared > 0 & adj_rsquared < 0.5) {
direction <- "positive"
value <-  "is between 0 and 0.5"
strength <- "a weak"
} else if (adj_rsquared > -0.5 & adj_rsquared < 0) {
direction <- "negative"
value <-  "is between -0.5 and 0"
strength <- "a weak"
} else if (adj_rsquared <= -0.5 & adj_rsquared > -0.8) {
direction <- "negative"
value <-  "is between -0.8 and -0.5"
strength <- "a moderate"
} else if (adj_rsquared <= -0.8) {
direction <- "negative"
value <-   "is less than or equal to -0.8"
strength <- "a strong"
} else if (adj_rsquared == 0) {
direction <- ""
value <-   "equals zero"
strength <- "no"
}
# Pastes together the adjusted r-squared interpretations
r <- paste0("The adjusted r-squared value is ", round(adj_rsquared, 4),
". Since ", round(adj_rsquared, 4),
" ", value, " this demonstrates ", strength, " ", direction,
" relationship between the predictor and response variables.")
# Conditions for p-value interpretations
if (p_value > 0.05) {
p <- paste0("There is not enough evidence to conclude that at least one of the ",
"predictors in the model has a significant effect on the response ",
"because the p-value: ",round(p_value, 4),".")
} else {
p <- paste0("There is significant evidence to conclude that at least one of the ",
"predictors in the model has a significant effect on the response ",
"because the p-value: ", round(p_value, 4),".")
}
# Pastes both interpretations
commentary <- cat(r, p, sep = "\n")
return(commentary)
}
library(linearcheck)
data(cars)
linearplot(cars, speed, dist, "plot")
# Creates a linear plot with line of best fit
linearplot <- function(data, x, y, title) {
plot <- ggplot(data, mapping = aes(x = {{x}}, y = {{y}})) +
geom_point(color = "blue") +
geom_smooth(method = "lm", fill = "lightblue", color = "aquamarine4") +
theme_bw() +
labs(title = title) +
theme_bw()
print(plot)
}
# Prints a summary statistics table and interpretation if specified
stats_table <- function(model, commentary = NULL) {
model_summary <- summary(model)
print(model_summary)
if (!is.null(commentary) && commentary == TRUE) {
commentary <- linearity_commentary(model)
cat(commentary, "\n")
}
}
library(linearcheck)
data(cars)
# Prints a summary statistics table and interpretation if specified
stats_table <- function(data, x, y, commentary = NULL) {
# x and y variables to vectors
# Source: ChatGPT to convert x and y to vectors
x <- as.vector(data[[deparse(substitute(x))]])
y <- as.vector(data[[deparse(substitute(y))]])
# model
model <- lm(y ~ x, data = data)
# model summary
model_summary <- summary(model)
print(model_summary)
if (!is.null(commentary) && commentary == TRUE) {
commentary <- linearity_commentary(model)
cat(commentary, "\n")
}
}
library(linearcheck)
data(cars)
stats_table(cars, speed, dist)
stats_table(cars, speed, dist, TRUE)
# Returning QQ Plot
qqgraph <- function(data, x, y) {
plot <- ggplot(data = data, mapping = aes(x = {{x}}, y = {{y}})) +
geom_point(color = "lightblue") +
geom_abline(intercept = 0, slope = 1, color = "blue") +
labs(x = "X", y = "Y", title = "Quantile-Quantile Plot") +
theme_bw()
print(plot)
}
library(linearcheck)
data(cars)
qqgraph(cars, speed, dist)
# Source for shapiro.test: https://www.geeksforgeeks.org/shapiro-wilk-test-in-r-programming/
swtable <- function(data, x, commentary = NULL) {
x_col <- data$x
sw_values <- shapiro.test(x_col)
print(sw_values)
if (commentary == TRUE) {
commentary <- normality_commentary(sw_values)
cat("\nCommentary: ", commentary, "\n")
}
}
library(linearcheck)
data(cars)
sw(cars, speed)
swtable(cars, speed)
swtable(cars, cars$speed)
# Source for shapiro.test: https://www.geeksforgeeks.org/shapiro-wilk-test-in-r-programming/
swtable <- function(data, x, commentary = NULL) {
x_col <- data$x
sw_values <- shapiro.test({{x_col}})
print(sw_values)
if (commentary == TRUE) {
commentary <- normality_commentary(sw_values)
cat("\nCommentary: ", commentary, "\n")
}
}
library(linearcheck)
# Source for shapiro.test: https://www.geeksforgeeks.org/shapiro-wilk-test-in-r-programming/
swtable <- function(data, x, commentary = NULL) {
#x_col <- data$x
# Source: ChatGPT to convert x and y to vectors
x <- as.vector(data[[deparse(substitute(x))]])
sw_values <- shapiro.test(x)
print(sw_values)
if (commentary == TRUE) {
commentary <- normality_commentary(sw_values)
cat("\nCommentary: ", commentary, "\n")
}
}
library(linearcheck)
data(cars)
swtable(cars, speed)
library(linearcheck)
library(linearcheck)
