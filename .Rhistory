} else {
commentary <- paste("There is significant evidence to conclude there is heteroscedasticity
in the model because the p-value:",bp_values$p.value,"is less
than or equal to 0.05. This violates the equal variance assumption.")
}
return(commentary)
}
bptable(data, x, y, commentary = TRUE)
equalvar_commentary(bptable)
data <- data.frame(x = c(1, 2, 3, 4, 5, 6), y = c(2, 4, 7, 10, 11, 14))
## figure out how to import packages
library(ggplot2)
function (..., list = character(), package = NULL, lib.loc = NULL,
verbose = getOption("verbose"), envir = .GlobalEnv, overwrite = TRUE)
library(lmtest)
library(kableExtra)
residplot <- function(data, x, y) {
plot <-
lm(y ~ x, data = data) |>
broom::augment() |>
ggplot(mapping = aes(y = .resid, x = .fitted)) +
geom_point(color = "darkblue") +
labs(x = "Fitted", y = "Residuals",
title = "Residuals vs. Fitted Plot") +
theme_bw()
print(plot)
}
bptable <- function(data, x, y, commentary = NULL) {
bp_values <- bptest(y ~ x, data = data)
# bp_table <- data.frame(
#   BP = bp_values$statistic,
#   df = bp_values$parameter,
#   p_value = bp_values$p.value
# )
# table <- kable(bp_table, "html", caption = "Breusch-Pagan Test") |>
#   kable_styling(full_width = FALSE)
# print(table)
print(bp_values)
if (is.null(commentary) | commentary == TRUE) {
commentary <- equalvar_commentary(bp_values)
cat("\nCommentary: ", commentary, "\n")
}
}
equalvar_commentary <- function(bp_values) {
if (bp_values$p.value > 0.05) {
commentary <- paste("There is significant evidence to conclude there is homoscedasticity
in the model because the p-value:",bp_values$p.value,"is greater
than 0.05. This passes the equal variance assumption.")
} else {
commentary <- paste("There is significant evidence to conclude there is heteroscedasticity
in the model because the p-value:",bp_values$p.value,"is less
than or equal to 0.05. This violates the equal variance assumption.")
}
return(commentary)
}
bptable(data, x, y, commentary = TRUE)
equalvar_commentary(bptable)
data <- data.frame(x = c(1, 2, 3, 4, 5, 6), y = c(2, 4, 7, 10, 11, 14))
bptable(data, x, y, commentary = TRUE)
equalvar_commentary(bptable)
equalvar_commentary <- function(bp_values) {
if (bp_values$p.value > 0.05) {
commentary <- paste("There is significant evidence to conclude there is homoscedasticity in the model because the p-value:",round(bp_values$p.value, 2),"is greater than 0.05. This passes the equal variance assumption.")
} else {
commentary <- paste("There is significant evidence to conclude there is heteroscedasticity in the model because the p-value:", round(bp_values$p.value, 2),"is less than or equal to 0.05. This violates the equal variance assumption.")
}
return(commentary)
}
bptable(data, x, y, commentary = TRUE)
data <- data.frame(x = c(1, 2, 3, 4, 5, 6), y = c(2, 4, 7, 10, 11, 14))
equalvar_commentary <- function(bp_values) {
if (bp_values$p.value > 0.05) {
commentary <- paste("There is significant evidence to conclude there is homoscedasticity <br> in the model because the p-value:",round(bp_values$p.value, 2),"is greater than 0.05. This passes the equal variance assumption.")
} else {
commentary <- paste("There is significant evidence to conclude there is heteroscedasticity in the model because the p-value:", round(bp_values$p.value, 2),"is less than or equal to 0.05. This violates the equal variance assumption.")
}
return(commentary)
bptable(data, x, y, commentary = TRUE)
data <- data.frame(x = c(1, 2, 3, 4, 5, 6), y = c(2, 4, 7, 10, 11, 14))
bptable(data, x, y, commentary = TRUE)
equalvar_commentary <- function(bp_values) {
if (bp_values$p.value > 0.05) {
commentary <- paste("There is significant evidence to conclude there is homoscedasticity <br> in the model because the p-value:",round(bp_values$p.value, 2),"is greater than 0.05. This passes the equal variance assumption.")
} else {
commentary <- paste("There is significant evidence to conclude there is heteroscedasticity <br> in the model because the p-value:", round(bp_values$p.value, 2),"is less than or equal to 0.05. This violates the equal variance assumption.")
}
return(commentary)
}
bptable(data, x, y, commentary = TRUE)
data <- data.frame(x = c(1, 2, 3, 4, 5, 6), y = c(2, 4, 7, 10, 11, 14))
equalvar_commentary <- function(bp_values) {
if (bp_values$p.value > 0.05) {
commentary <- paste("There is significant evidence to conclude there is homoscedasticity <br> in the model because the p-value:",round(bp_values$p.value, 2),"is greater than 0.05. This passes the equal variance assumption.")
} else {
commentary <- paste("There is significant evidence to conclude there is heteroscedasticity <br> in the model because the p-value:", round(bp_values$p.value, 2),"is less than or equal to 0.05. This violates the equal variance assumption.")
}
return(commentary)
}
bptable(data, x, y, commentary = TRUE)
equalvar_commentary <- function(bp_values) {
if (bp_values$p.value > 0.05) {
commentary <- paste("There is significant evidence to conclude there is homoscedasticity",
"in the model because the p-value:",round(bp_values$p.value, 2),
"is greater than 0.05. This passes the equal variance assumption.")
} else {
commentary <- paste("There is significant evidence to conclude there is heteroscedasticity",
"in the model because the p-value:", round(bp_values$p.value, 2),
"is less than or equal to 0.05. This violates the equal variance assumption.")
}
return(commentary)
}
bptable(data, x, y, commentary = TRUE)
pr_push()
pr_merge_main()
pr_merge_main()
pr_push()
pr_merge_main()
library(ggplot2)
library(tidyverse)
# Returning QQ Plot
qqgraph <- function(data, x, y, commentary = NULL) {
plot <- ggplot(data = data, mapping = aes(x = x, y = y)) +
geom_point(color = "darkorange") +
geom_abline(intercept = 0, slope = 1, color = "blue") +
labs(x = "X", y = "Y", title = "Quantile-Quantile Plot") +
theme_bw()
return(plot)
}
# Printing out Shapiro-Wilk test and commentary if wanted
# Source for shapiro.test: https://www.geeksforgeeks.org/shapiro-wilk-test-in-r-programming/
swtable <- function(data, x, y, commentary = NULL) {
sw_values <- shapiro.test(x)
print(sw_values)
if (commentary == TRUE) {
commentary <- normality_commentary(sw_values)
cat("\nCommentary: ", commentary, "\n")
}
}
normality_commentary <- function(sw_values) {
if (sw_values$p.value > 0.05) {
commentary <- paste("There is significant evidence to conclude there is normality",
"in the model because the p-value:", round(bp_values$p.value, 4),
"is greater than 0.05. This passes the normality assumption.")
} else {
commentary <- paste("There is significant evidence to conclude there is not normality",
"in the model because the p-value:", round(bp_values$p.value, 4),
"is less than or equal to 0.05. This violates the normality assumption.")
}
return(commentary)
}
data <- data.frame(x = c(1, 2, 3, 4, 5, 6), y = c(2, 4, 7, 10, 11, 14))
swtable(data, x, y, commentary = TRUE)
library(ggplot2)
library(tidyverse)
# Returning QQ Plot
qqgraph <- function(data, x, y, commentary = NULL) {
plot <- ggplot(data = data, mapping = aes(x = x, y = y)) +
geom_point(color = "darkorange") +
geom_abline(intercept = 0, slope = 1, color = "blue") +
labs(x = "X", y = "Y", title = "Quantile-Quantile Plot") +
theme_bw()
return(plot)
}
# Printing out Shapiro-Wilk test and commentary if wanted
# Source for shapiro.test: https://www.geeksforgeeks.org/shapiro-wilk-test-in-r-programming/
swtable <- function(data, x, y, commentary = NULL) {
sw_values <- shapiro.test(x)
print(sw_values)
if (commentary == TRUE) {
commentary <- normality_commentary(sw_values)
cat("\nCommentary: ", commentary, "\n")
}
}
normality_commentary <- function(sw_values) {
if (sw_values$p.value > 0.05) {
commentary <- paste("There is significant evidence to conclude there is normality",
"in the model because the p-value:", round(sw_values$p.value, 4),
"is greater than 0.05. This passes the normality assumption.")
} else {
commentary <- paste("There is significant evidence to conclude there is not normality",
"in the model because the p-value:", round(sw_values$p.value, 4),
"is less than or equal to 0.05. This violates the normality assumption.")
}
return(commentary)
}
swtable(data, x, y, commentary = TRUE)
data <- data.frame(x = c(1, 2, 3, 4, 5, 6), y = c(2, 4, 7, 10, 11, 14))
library(ggplot2)
library(tidyverse)
# Returning QQ Plot
qqgraph <- function(data, x, y, commentary = NULL) {
plot <- ggplot(data = data, mapping = aes(x = x, y = y)) +
geom_point(color = "darkorange") +
geom_abline(intercept = 0, slope = 1, color = "blue") +
labs(x = "X", y = "Y", title = "Quantile-Quantile Plot") +
theme_bw()
return(plot)
}
# Printing out Shapiro-Wilk test and commentary if wanted
# Source for shapiro.test: https://www.geeksforgeeks.org/shapiro-wilk-test-in-r-programming/
swtable <- function(data, x, commentary = NULL) {
sw_values <- shapiro.test(x)
print(sw_values)
if (commentary == TRUE) {
commentary <- normality_commentary(sw_values)
cat("\nCommentary: ", commentary, "\n")
}
}
normality_commentary <- function(sw_values) {
if (sw_values$p.value > 0.05) {
commentary <- paste("There is significant evidence to conclude there is normality",
"in the model because the p-value:", round(sw_values$p.value, 4),
"is greater than 0.05. This passes the normality assumption.")
} else {
commentary <- paste("There is significant evidence to conclude there is not normality",
"in the model because the p-value:", round(sw_values$p.value, 4),
"is less than or equal to 0.05. This violates the normality assumption.")
}
return(commentary)
}
swtable(data, x, y, commentary = TRUE)
data <- data.frame(x = c(1, 2, 3, 4, 5, 6), y = c(2, 4, 7, 10, 11, 14))
swtable(data, x, commentary = TRUE)
data <- data.frame(x = c(1, 2, 3, 4, 5, 6), y = c(2, 4, 7, 10, 11, 14))
library(ggplot2)
library(tidyverse)
# Returning QQ Plot
qqgraph <- function(data, x, y, commentary = NULL) {
plot <- ggplot(data = data, mapping = aes(x = x, y = y)) +
geom_point(color = "darkorange") +
geom_abline(intercept = 0, slope = 1, color = "blue") +
labs(x = "X", y = "Y", title = "Quantile-Quantile Plot") +
theme_bw()
return(plot)
}
# Printing out Shapiro-Wilk test and commentary if wanted
# Source for shapiro.test: https://www.geeksforgeeks.org/shapiro-wilk-test-in-r-programming/
swtable <- function(data, x, commentary = NULL) {
x_col <- data$x
sw_values <- shapiro.test(x_col)
print(sw_values)
if (commentary == TRUE) {
commentary <- normality_commentary(sw_values)
cat("\nCommentary: ", commentary, "\n")
}
}
normality_commentary <- function(sw_values) {
if (sw_values$p.value > 0.05) {
commentary <- paste("There is significant evidence to conclude there is normality",
"in the model because the p-value:", round(sw_values$p.value, 4),
"is greater than 0.05. This passes the normality assumption.")
} else {
commentary <- paste("There is significant evidence to conclude there is not normality",
"in the model because the p-value:", round(sw_values$p.value, 4),
"is less than or equal to 0.05. This violates the normality assumption.")
}
return(commentary)
}
swtable(data, x, commentary = TRUE)
#swtable(data, x, commentary = TRUE)
#data <- data.frame(x = c(1, 2, 3, 4, 5, 6), y = c(2, 4, 7, 10, 11, 14))
qqgraph(data, x, y)
library(ggplot2)
library(tidyverse)
# Returning QQ Plot
qqgraph <- function(data, x, y) {
plot <- ggplot(data = data, mapping = aes(x = {{x}}, y = {{y}})) +
geom_point(color = "darkorange") +
geom_abline(intercept = 0, slope = 1, color = "blue") +
labs(x = "X", y = "Y", title = "Quantile-Quantile Plot") +
theme_bw()
return(plot)
}
# Printing out Shapiro-Wilk test and commentary if wanted
# Source for shapiro.test: https://www.geeksforgeeks.org/shapiro-wilk-test-in-r-programming/
swtable <- function(data, x, commentary = NULL) {
x_col <- data$x
sw_values <- shapiro.test(x_col)
print(sw_values)
if (commentary == TRUE) {
commentary <- normality_commentary(sw_values)
cat("\nCommentary: ", commentary, "\n")
}
}
normality_commentary <- function(sw_values) {
if (sw_values$p.value > 0.05) {
commentary <- paste("There is significant evidence to conclude there is normality",
"in the model because the p-value:", round(sw_values$p.value, 4),
"is greater than 0.05. This passes the normality assumption.")
} else {
commentary <- paste("There is significant evidence to conclude there is not normality",
"in the model because the p-value:", round(sw_values$p.value, 4),
"is less than or equal to 0.05. This violates the normality assumption.")
}
return(commentary)
}
#swtable(data, x, commentary = TRUE)
#data <- data.frame(x = c(1, 2, 3, 4, 5, 6), y = c(2, 4, 7, 10, 11, 14))
qqgraph(data, x, y)
# Returning QQ Plot
qqgraph <- function(data, x, y) {
plot <- ggplot(data = data, mapping = aes(x = {{y}}, y = {{x}})) +
geom_point(color = "darkorange") +
geom_abline(intercept = 0, slope = 1, color = "blue") +
labs(x = "X", y = "Y", title = "Quantile-Quantile Plot") +
theme_bw()
return(plot)
}
# Printing out Shapiro-Wilk test and commentary if wanted
# Source for shapiro.test: https://www.geeksforgeeks.org/shapiro-wilk-test-in-r-programming/
swtable <- function(data, x, commentary = NULL) {
x_col <- data$x
sw_values <- shapiro.test(x_col)
print(sw_values)
if (commentary == TRUE) {
commentary <- normality_commentary(sw_values)
cat("\nCommentary: ", commentary, "\n")
}
}
normality_commentary <- function(sw_values) {
if (sw_values$p.value > 0.05) {
commentary <- paste("There is significant evidence to conclude there is normality",
"in the model because the p-value:", round(sw_values$p.value, 4),
"is greater than 0.05. This passes the normality assumption.")
} else {
commentary <- paste("There is significant evidence to conclude there is not normality",
"in the model because the p-value:", round(sw_values$p.value, 4),
"is less than or equal to 0.05. This violates the normality assumption.")
}
return(commentary)
}
#swtable(data, x, commentary = TRUE)
#data <- data.frame(x = c(1, 2, 3, 4, 5, 6), y = c(2, 4, 7, 10, 11, 14))
qqgraph(data, x, y)
# Returning QQ Plot
qqgraph <- function(data, x, y) {
plot <- ggplot(data = data, mapping = aes(x = {{x}}, y = {{y}})) +
geom_point(color = "darkorange") +
geom_abline(intercept = 0, slope = 1, color = "blue") +
labs(x = "X", y = "Y", title = "Quantile-Quantile Plot") +
theme_bw() +
coord_fixed()
return(plot)
}
# Printing out Shapiro-Wilk test and commentary if wanted
# Source for shapiro.test: https://www.geeksforgeeks.org/shapiro-wilk-test-in-r-programming/
swtable <- function(data, x, commentary = NULL) {
x_col <- data$x
sw_values <- shapiro.test(x_col)
print(sw_values)
if (commentary == TRUE) {
commentary <- normality_commentary(sw_values)
cat("\nCommentary: ", commentary, "\n")
}
}
normality_commentary <- function(sw_values) {
if (sw_values$p.value > 0.05) {
commentary <- paste("There is significant evidence to conclude there is normality",
"in the model because the p-value:", round(sw_values$p.value, 4),
"is greater than 0.05. This passes the normality assumption.")
} else {
commentary <- paste("There is significant evidence to conclude there is not normality",
"in the model because the p-value:", round(sw_values$p.value, 4),
"is less than or equal to 0.05. This violates the normality assumption.")
}
return(commentary)
}
#swtable(data, x, commentary = TRUE)
#data <- data.frame(x = c(1, 2, 3, 4, 5, 6), y = c(2, 4, 7, 10, 11, 14))
qqgraph(data, x, y)
plot <- ggplot(data = data, mapping = aes(x = {{x}}, y = {{y}})) +
geom_point(color = "darkorange") +
geom_abline(intercept = 0, slope = 1, color = "blue") +
labs(x = "X", y = "Y", title = "Quantile-Quantile Plot") +
theme_bw()
return(plot)
library(ggplot2)
library(tidyverse)
# Returning QQ Plot
qqgraph <- function(data, x, y) {
plot <- ggplot(data = data, mapping = aes(x = {{x}}, y = {{y}})) +
geom_point(color = "darkorange") +
geom_abline(intercept = 0, slope = 1, color = "blue") +
labs(x = "X", y = "Y", title = "Quantile-Quantile Plot") +
theme_bw()
return(plot)
}
# Printing out Shapiro-Wilk test and commentary if wanted
# Source for shapiro.test: https://www.geeksforgeeks.org/shapiro-wilk-test-in-r-programming/
swtable <- function(data, x, commentary = NULL) {
x_col <- data$x
sw_values <- shapiro.test(x_col)
print(sw_values)
if (commentary == TRUE) {
commentary <- normality_commentary(sw_values)
cat("\nCommentary: ", commentary, "\n")
}
}
normality_commentary <- function(sw_values) {
if (sw_values$p.value > 0.05) {
commentary <- paste("There is significant evidence to conclude there is normality",
"in the model because the p-value:", round(sw_values$p.value, 4),
"is greater than 0.05. This passes the normality assumption.")
} else {
commentary <- paste("There is significant evidence to conclude there is not normality",
"in the model because the p-value:", round(sw_values$p.value, 4),
"is less than or equal to 0.05. This violates the normality assumption.")
}
return(commentary)
}
#swtable(data, x, commentary = TRUE)
#data <- data.frame(x = c(1, 2, 3, 4, 5, 6), y = c(2, 4, 7, 10, 11, 14))
qqgraph(data, x, y)
?dwtest
library(ggplot2)
library(tidyverse)
# Returning ACF and PACF
acf_pacf <- function(data, x, y) {
acf(x, main = "X ACF Plot")
pacf(x, main = "X PACF Plot")
acf(y, main = "Y ACF Plot")
pacf(y, main = "Y PACF Plot")
}
# Printing out Durbin-Watson test and commentary if wanted
dwtable <- function(data, x, y, commentary = NULL) {
dw_value <- dwtest(y ~ x, data = data)
print(dw_value)
if (commentary == TRUE) {
commentary <- independence_commentary(dw_value)
cat("\nCommentary: ", commentary, "\n")
}
}
independence_commentary <- function(dw_value) {
if (dw_value$p.value > 0.05) {
commentary <- paste("There is significant evidence to conclude there is independence",
"in the model because the p-value:", round(dw_value$p.value, 4),
"is greater than 0.05. This passes the independence assumption.")
} else {
commentary <- paste("There is significant evidence to conclude there is not independence",
"in the model because the p-value:", round(dw_value$p.value, 4),
"is less than or equal to 0.05. This violates the independence assumption.")
}
return(commentary)
}
data <- data.frame(x = c(1, 2, 3, 4, 5, 6), y = c(2, 4, 7, 10, 11, 14))
dwtable(data, x, y, commentary = TRUE)
acf_pacf(data, x, y)
# Returning ACF and PACF
acf_pacf <- function(data, x, y) {
acf(data$x, main = "X ACF Plot")
pacf(data$x, main = "X PACF Plot")
acf(data$y, main = "Y ACF Plot")
pacf(data$y, main = "Y PACF Plot")
}
# Printing out Durbin-Watson test and commentary if wanted
dwtable <- function(data, x, y, commentary = NULL) {
dw_value <- dwtest(y ~ x, data = data)
print(dw_value)
if (commentary == TRUE) {
commentary <- independence_commentary(dw_value)
cat("\nCommentary: ", commentary, "\n")
}
}
independence_commentary <- function(dw_value) {
if (dw_value$p.value > 0.05) {
commentary <- paste("There is significant evidence to conclude there is independence",
"in the model because the p-value:", round(dw_value$p.value, 4),
"is greater than 0.05. This passes the independence assumption.")
} else {
commentary <- paste("There is significant evidence to conclude there is not independence",
"in the model because the p-value:", round(dw_value$p.value, 4),
"is less than or equal to 0.05. This violates the independence assumption.")
}
return(commentary)
}
dwtable(data, x, y, commentary = TRUE)
data <- data.frame(x = c(1, 2, 3, 4, 5, 6), y = c(2, 4, 7, 10, 11, 14))
acf_pacf(data, x, y)
# Returning ACF and PACF
acf_pacf <- function(data, x, y) {
par(mfrow=c(2,2))
acf(data$x, main = "X ACF Plot")
pacf(data$x, main = "X PACF Plot")
acf(data$y, main = "Y ACF Plot")
pacf(data$y, main = "Y PACF Plot")
}
# Printing out Durbin-Watson test and commentary if wanted
dwtable <- function(data, x, y, commentary = NULL) {
dw_value <- dwtest(y ~ x, data = data)
print(dw_value)
if (commentary == TRUE) {
commentary <- independence_commentary(dw_value)
cat("\nCommentary: ", commentary, "\n")
}
}
independence_commentary <- function(dw_value) {
if (dw_value$p.value > 0.05) {
commentary <- paste("There is significant evidence to conclude there is independence",
"in the model because the p-value:", round(dw_value$p.value, 4),
"is greater than 0.05. This passes the independence assumption.")
} else {
commentary <- paste("There is significant evidence to conclude there is not independence",
"in the model because the p-value:", round(dw_value$p.value, 4),
"is less than or equal to 0.05. This violates the independence assumption.")
}
return(commentary)
}
dwtable(data, x, y, commentary = TRUE)
data <- data.frame(x = c(1, 2, 3, 4, 5, 6), y = c(2, 4, 7, 10, 11, 14))
acf_pacf(data, x, y)
acf_pacf(data, x, y)
pr_push()
